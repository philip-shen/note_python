# 2019/09/18 Initial 

# Generated by Selenium IDE
from api_selenium import *
# Refer https://www.pingshiuanchua.com/blog/post/error-handling-in-selenium-on-python
from selenium.common.exceptions import ElementClickInterceptedException

from logger import logger
import requests

class dir17x19x_internet_mode_setup():
  def __init__(self):
    self.driver = method_selenium()

  def method_teardown(self):
    self.driver.method_teardown()

  def method_close(self):
    self.driver.method_close()

  def dut_Login(self,*args, **kwargs):
    self.driver.method_get(how)
    self.driver.method_set_window_size(1080, 705)
    self.driver.method_by_XPath_send_keys("//input[@id=\'admin_Password\']",kwargs['dut']['login_passwd'])
    self.driver.method_by_ID_click("logIn_btn")

  def dut_Sys_Reboot(self):
    
    self.driver.method_by_ID_mouseOver("menu_Management")

    self.driver.method_by_ID_click("menuBtn_Admin")
    
    self.driver.method_by_ID_click("page_btn")

    self.driver.method_by_ID_click("btn_reboot")

    #Wait dialogue
    self.driver.method_by_XPath_waitforelement_visibile("//div[@id=\'REBOOTCheck\']/table/tbody/tr/td")

    #Click
    self.driver.method_by_ID_click("dialogBtn_rebootOk")

    #Count down
    self.driver.method_by_ID_waitforelement_Invisibile("REBOOT")

    self.driver.method_by_ID_click("dialogBtn_rebootSuccess")

  def dut_Sys_Reset(self):
    #Mouse over "menu_Management"
    self.driver.method_by_ID_mouseOver("menu_Management")

    #click
    self.driver.method_by_ID_click("menuBtn_Admin")

    self.driver.method_by_ID_click("page_btn")

    self.driver.method_by_ID_click("btn_restorToFactoryDefault")

    self.driver.method_by_ID_click("dialogBtn_restorToFactoryDefaultOk")

    self.driver.method_by_ID_click("AlertPopBody")

    #Count down
    self.driver.method_by_ID_waitforelement_Invisibile("FACTORYDEFAULT")

    self.driver.method_by_ID_click("dialogBtn_restorToFactoryDefaultSuccess")

    self.driver.method_by_ID_click("btn_agree")

    #click()
    self.driver.method_by_ID_click("closeCreatePopBtn")

  def dut_internet_mode_l2tp_manual(self,*args, **kwargs):
    # Mouse over "menu_Settings"
    self.driver.method_by_ID_mouseOver("menu_Settings")

    self.driver.method_by_ID_click("menuBtn_Internet")
    
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")
    
    self.driver.method_by_LinkText_click("L2TP")
    
    # Key in Srv IP Add, username, password
    self.driver.method_by_ID_type("serverIPAddress_L2TP","10.0.1.3")
    self.driver.method_by_ID_type("userName_L2TP","ubuntutest")
    self.driver.method_by_ID_type("password_L2TP","test1234")

    # Select Manual mode
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")
    self.driver.method_by_LinkText_click("Manual")

    self.driver.method_by_ID_click("Save_btn")

    # Waiting set up
    self.driver.method_by_ID_verifytext("popalert_desc","Please wait ...")
    self.driver.method_by_ID_waitforelement_visibile("popalert_ok")
    self.driver.method_by_ID_verifytext("popalert_desc","The new settings have been saved.")
    
    # Press Ok button
    self.driver.method_by_ID_click("popalert_ok")

    self.driver.method_by_ID_click("menu_Home")

    self.driver.method_by_ID_click_chkclickable("RenewRelease_btn")

    #Check connect status
    self.driver.method_by_ID_verifytext_chkclickable("index_ShowNetworkStatus","Connected")  

class dir17x19x_wifi_2G5G_Setup():

  def __init__(self):
    self.driver = method_selenium()
    
  def method_teardown(self):
    self.driver.method_teardown()

  def method_close(self):
    self.driver.method_close()
  
  def dut_Login(self,*args, **kwargs):
    #self.driver.method_get(how)
    #print(args[0])
    self.driver.method_get(args[0])
    self.driver.method_set_window_size(1080, 905)
    
    self.driver.method_by_XPath_send_keys("//input[@id=\'admin_Password\']",kwargs['dut']['login_passwd'])
    self.driver.method_by_ID_click("logIn_btn")

  def wifi_SmartConnDisable(self):
    self.driver.method_by_ID_mouseOver("menu_Settings")

    self.driver.method_by_ID_click("menuBtn_WiFi")

    self.driver.method_by_CSS_SELECTOR_click("#RADIO_smart .chkbox_enabled")

    # Extend 2G option page
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    #Disable Coexistence_24
    self.driver.method_by_CSS_SELECTOR_click("#coexistence_24_tr .chkbox_enabled")

    #push save button
    self.driver.method_by_ID_click("Save_btn")

    #Wait
    self.driver.method_by_ID_click("popalert_ok")  

  

  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'WPAORWPA2-PSK\')])[2]").click()
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'None\')])[2]").click()
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'WPA3-PSK\')])[2]").click()
  #######################################################################
  def xpath_wifi_5g_sec_mode(self,what):
    opt_what=''
    if what == "WPA3-Personal":
      opt_what= 'WPA3-PSK'
    elif what == "WPA/WPA2-Personal":
      opt_what= 'WPAORWPA2-PSK'
    else:
      opt_what= 'None'

    opt_what= "(//a[contains(@href, \'"+opt_what+"\')])[2]"
    return opt_what  
  
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'None\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'WPA3-PSK\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'WPAORWPA2-PSK\')]").click()
  #
  #self.driver.find_element(By.XPATH, "//a[contains(., \'None\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(.,\'WPA3-Personal\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(.,\'WPA/WPA2-Personal\')]").click()
  #######################################################################
  def xpath_wifi_2g_sec_mode(self,what):
    opt_what=''
    if what == "WPA3-Personal":
      opt_what= 'WPA3-PSK'
    elif what == "WPA/WPA2-Personal":
      opt_what= 'WPAORWPA2-PSK'
    else:
      opt_what= 'None'

    opt_what= "//a[contains(@href, \'"+opt_what+"\')]"
    logger.info('opt_what :{0} '.format(opt_what));#debug purpose

    return opt_what  

  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'true\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'false\')]").click()
  #######################################################################  
  def xpath_wifi_2g_visibility_mode(self,*args, **kwargs):
    opt_what=''
    #logger.info('args[0] lower :{0} '.format(args[0].lower()));#debug purpose
    
    if args[0].lower() == "visible":
      opt_what= 'true'
    else:
      opt_what= 'false'

    opt_what= "//a[contains(@href, \'"+opt_what+"\')]"
    return opt_what  
  
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'true\')])[2]").click()
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'false\')])[2]").click()
  #######################################################################  
  def xpath_wifi_5g_visibility_mode(self,*args, **kwargs):
    opt_what=''
    #logger.info('args[0] lower :{0} '.format(args[0].lower()));#debug purpose
    
    if args[0].lower() == "visible":
      opt_what= 'true'
    else:
      opt_what= 'false'

    opt_what= "(//a[contains(@href, \'"+opt_what+"\')])[2]"
    return opt_what  
  
  # 2.4G TxPwrLevel
  # self.driver.find_element(By.XPATH, "//a[contains(@href, \'100\')]").click()--->High
  # self.driver.find_element(By.XPATH, "//a[contains(@href, \'75\')]").click()--->Medium
  # self.driver.find_element(By.XPATH, "//a[contains(@href, \'50\')]").click()--->Low
  # 5G TxPwrLevel
  # self.driver.find_element(By.XPATH, "(//a[contains(@href, \'100\')])[2]").click()--->High
  # self.driver.find_element(By.XPATH, "(//a[contains(@href, \'75\')])[2]").click()--->Medium
  # self.driver.find_element(By.XPATH, "(//a[contains(@href, \'50\')])[2]").click()--->Low
  ####################################################################
  def xpath_wifi_txpwr_level(self,*args, **kwargs):
    opt_what=''

    if args[0].lower() == "high":
      opt_what= '100'
    elif args[0].lower() == "medium":  
      opt_what= '75'
    else:
      opt_what= '50'

    return opt_what  

  def xpath_wifi_2g5g_txpwr_mode(self,*args, **kwargs):
    opt_what=''
    wif_2g_txpwr_levle=''
    wif_5g_txpwr_levle=''

    # 2.4G Visible and 5G Invisible
    if (kwargs['wifi_2g']['visibility_status'].lower() == "visible") and \
        (kwargs['wifi_5g']['visibility_status'].lower() == "invisible"):

      opt_what= self.xpath_wifi_txpwr_level("High")
      wif_2g_txpwr_levle="//a[contains(@href, \'"+opt_what+"\')]"
      
      # 10/13/2019 modify low-->medium to prepare 2G Invisible 
      opt_what= self.xpath_wifi_txpwr_level("Low")
      #opt_what= self.xpath_wifi_txpwr_level("High")
      wif_5g_txpwr_levle="(//a[contains(@href, \'"+opt_what+"\')])[2]"  

    # 2.4G Invisible and 5G Visible
    if (kwargs['wifi_2g']['visibility_status'].lower() == "invisible") and \
        (kwargs['wifi_5g']['visibility_status'].lower() == "visible"):

      # 10/13/2019 modify low-->medium to prepare 5G Invisible 
      opt_what= self.xpath_wifi_txpwr_level("Low")
      #opt_what= self.xpath_wifi_txpwr_level("High")
      wif_2g_txpwr_levle="//a[contains(@href, \'"+opt_what+"\')]"
      
      opt_what= self.xpath_wifi_txpwr_level("High")
      wif_5g_txpwr_levle="(//a[contains(@href, \'"+opt_what+"\')])[2]"    

    logger.info('Generate wif_2g_txpwr_levle :{0} '.format(wif_2g_txpwr_levle));#debug purpose
    logger.info('Generate wif_5g_txpwr_levle :{0} '.format(wif_5g_txpwr_levle));#debug purpose

    return wif_2g_txpwr_levle, wif_5g_txpwr_levle   

  #
  # WiFi 2G Setting
  # 10/13/2019 Double Ten, Cause TxPwr options between 2.4G and 5G are depended
  #            DUT reset to default then don't chang TxPwr options of 2.4G and 5G
  ####################################################################
  def wifi_2g_setup(self,**kwargs):
    # Mouse over
    self.driver.method_by_ID_mouseOver("menu_Settings")

    # Select WiFi option
    self.driver.method_by_ID_click("menuBtn_WiFi")

    # Expand 2.4G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    # change 2G Securiyt Mode
    #try:
      # Tries to click an element
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")
      
    #except ElementClickInterceptedException:
      # Re try again
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")
    
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")

    # Check 2G security option
    rtu_visibility= self.xpath_wifi_2g_sec_mode(kwargs['wifi_2g']['security_mode'])
    #what= kwargs['wifi_2g']['security_mode']

    try:
      # Tries to drop down list to select
      self.driver.method_by_XPath_click(rtu_visibility)
      #self.driver.method_by_LinkText_click(what)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(rtu_visibility)
      #self.driver.method_by_LinkText_click(what)

    #self.driver.method_by_LinkText_click(kwargs['wifi_2g']['security_mode'])


    # Change SSID Password
    self.driver.method_by_ID_type("wifiName_24",kwargs['wifi_2g']['ssid'])
    self.driver.method_by_ID_type("password_24",kwargs['wifi_2g']['password'])

    # Change channel#
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[8]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[8]")

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['channel'])

    # Change 2G TxPower High
    #try:
      # Tries to click an element
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")
      
    #except ElementClickInterceptedException:
      # Re try again
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")

    # 10/13/2019 remakr below
    # self.driver.method_by_LinkText_click("High")
    #wif_2g_txpwr_levle, wif_5g_txpwr_levle= self.xpath_wifi_2g5g_txpwr_mode(**kwargs)
    #self.driver.method_by_XPath_click(wif_2g_txpwr_levle)

    # Refer https://www.pingshiuanchua.com/blog/post/error-handling-in-selenium-on-python
    # Change Channel Width
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[12]")
    except ElementClickInterceptedException:
      # Re try again
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[12]")

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['channel_width'])

    
    #self.driver.find_element(By.CSS_SELECTOR, ".radio24_advBtn > span").click()    
    #WebDriverWait(self.driver, 5000).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#coexistence_24_tr .chkbox_enabled")))
    #self.driver.find_element(By.CSS_SELECTOR, "#coexistence_24_tr .chkbox_enabled").click()

    # Change Visibility Status:	
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[14]")
    # Make 2G invisible

    #2019/09/23 string gened from xpath_wifi_2g_visibility_mode() couldn't available
    rtu_visibility=self.xpath_wifi_2g_visibility_mode(kwargs['wifi_2g']['visibility_status'])
    #logger.info('rtu_visibility:{0} '.format(rtu_visibility))
    
    try:
      self.driver.method_by_XPath_click(rtu_visibility)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(rtu_visibility)

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['visibility_status'])

    # Change 5G setting
    self.driver.method_by_CSS_SELECTOR_click("#RADIO_5 > .advButton > span")

    self.driver.method_by_ID_type("wifiName_5",kwargs['wifi_5g']['ssid'])
    self.driver.method_by_ID_type("password_5",kwargs['wifi_5g']['password'])

    # Select 5G Security mode by Select (Drop down list)  
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")

    # Check 5G security option
    what= self.xpath_wifi_5g_sec_mode(kwargs['wifi_5g']['security_mode'])
    
    try:
      # Tries to drop down list to select
      self.driver.method_by_XPath_click(what)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(what)

    # Change 5G TxPower Low
    #try:
      # Tries to click an element
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[26]")
      
    #except ElementClickInterceptedException:
      # Re try again
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[26]")

    # 10/13/2019 add below
    #wif_2g_txpwr_levle, wif_5g_txpwr_levle= self.xpath_wifi_2g5g_txpwr_mode(**kwargs)
    #self.driver.method_by_XPath_click(wif_5g_txpwr_levle)

    
    # Make 5G invisible
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")

    rtu_visibility=self.xpath_wifi_5g_visibility_mode(kwargs['wifi_5g']['visibility_status'])
    #logger.info('5G rtu_visibility:{0} '.format(rtu_visibility))

    try:
      self.driver.method_by_XPath_click(rtu_visibility)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(rtu_visibility)

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['visibility_status'])
    
    # 2019/09/23
    # selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element 
    # <a href="false" rel="false" class="">...</a> is not clickable at point (571, 529). 
    # Other element would receive the click: <a href="#" class="sbSelector" style="width:190px">...</a>
    # (Session info: chrome=77.0.3865.90)
    # remark below line
    #self.driver.method_by_XPath_click(rtu_visibility)

    # Press Save buttion
    self.driver.method_by_ID_click("Save_btn")

    self.driver.method_by_ID_click("popalert_ok")  
  #
  # WiFi 5G Setting
  # 10/13/2019 Double Ten, Cause TxPwr options between 2.4G and 5G are depended
  #            DUT reset to default then don't chang TxPwr options of 2.4G and 5G
  ####################################################################
  def wifi_5g_setup(self,**kwargs):
    # Mouse over
    self.driver.method_by_ID_mouseOver("menu_Settings")

    # Select WiFi option
    self.driver.method_by_ID_click("menuBtn_WiFi")
    
    # Expand 2.4G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    # Change SSID Password
    self.driver.method_by_ID_type("wifiName_24",kwargs['wifi_2g']['ssid'])
    self.driver.method_by_ID_type("password_24",kwargs['wifi_2g']['password'])
    
    # 10/13/2019 To change 5G channel to Auto then change 2G channel# first
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[8]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[8]")

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['channel'])

    # Change Visibility Status:	
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[14]")
    
    # Change 2G TxPower Low
    #try:
      # Tries to click an element
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")
      
    #except ElementClickInterceptedException:
      # Re try again
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")

    # 10/13/2019 remakr below
    # self.driver.method_by_LinkText_click("High")
    #wif_2g_txpwr_levle, wif_5g_txpwr_levle= self.xpath_wifi_2g5g_txpwr_mode(**kwargs)
    #self.driver.method_by_XPath_click(wif_2g_txpwr_levle)

    # Make 2G Invisible
    #2019/09/23 string gened from xpath_wifi_2g_visibility_mode() couldn't available
    rtu_visibility=self.xpath_wifi_2g_visibility_mode(kwargs['wifi_2g']['visibility_status'])
    #logger.info('rtu_visibility:{0} '.format(rtu_visibility))
    
    try:
      self.driver.method_by_XPath_click(rtu_visibility)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(rtu_visibility)

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['visibility_status'])

    
    # Change 5G SSID Password
    self.driver.method_by_ID_type("wifiName_5",kwargs['wifi_5g']['ssid'])
    self.driver.method_by_ID_type("password_5",kwargs['wifi_5g']['password'])
    
    # Expand 5G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click("#RADIO_5 > .advButton > span")
    
    # Select 5G Security mode    
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['security_mode'])

    
    # Change Channel
    # 10/13/2019 originally, 5G Channel setting
    #self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[24]")
    #self.driver.method_by_LinkText_click(kwargs['wifi_5g']['channel'])

    # 10/13/2019 rfer 2G Channel setting
    # Change 5G channel#
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[24]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[24]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['channel'])

    # Change Channel width
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[28]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[28]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['channel_width'])

    # Change 5G TxPower High
    #try:
      # Tries to click an element
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[26]")
      
    #except ElementClickInterceptedException:
      # Re try again
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[26]")

    # 10/13/2019 add below
    #wif_2g_txpwr_levle, wif_5g_txpwr_levle= self.xpath_wifi_2g5g_txpwr_mode(**kwargs)
    #self.driver.method_by_XPath_click(wif_5g_txpwr_levle)

    # Make 5G Invisible
    #try:
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")
    #except ElementClickInterceptedException:
    #  self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")

    #rtu_visibility=xpath_wifi_5g_visibility_mode(kwargs['wifi_5g']['visibility_status'])
    #logger.info('rtu_visibility:{0} '.format(rtu_visibility))
    #self.driver.method_by_LinkText_click(rtu_visibility)

    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")

    rtu_visibility=self.xpath_wifi_5g_visibility_mode(kwargs['wifi_5g']['visibility_status'])
    #logger.info('5G rtu_visibility:{0} '.format(rtu_visibility))

    try:
      self.driver.method_by_XPath_click(rtu_visibility)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(rtu_visibility)

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['visibility_status'])

    # press save buttion
    self.driver.method_by_ID_click("Save_btn")

    # Waiting
    self.driver.method_by_ID_click("popalert_ok")  
  
  # 
  # By Test Case ID to setup WiFi 2.4G or 5G Setting
  ####################################################################
  def wifi_2g5g_setup_thruputtest(self, *args, **kwargs):
    go_url="http://" + kwargs["dut"]["lan_ip_address"]

    r = requests.get(go_url,timeout=15)
    logger.info('DUT:{0} Statu_Code:{1}'.format(go_url, str(r.status_code) ))
    page_status_code = r.status_code
    if page_status_code != 200:
      return

    logger.info('TestCase_ID:{0} TestCase_Desc:{1}'.format(kwargs["test_case"]["id"],kwargs["test_case"]["description"]))

    self.dut_Login(go_url,**kwargs)

    int_test_case_id= int(kwargs["test_case"]["id"])
    mod_int_test_case_id= (int_test_case_id % 10)

    # Fastest way to check if a value exists in a list
    # https://stackoverflow.com/questions/7571635/fastest-way-to-check-if-a-value-exists-in-a-list
    #
    # config_para["DUT_Config_WLAN"][1]~config_para["DUT_Config_WLAN"][3] 
    # config_para["DUT_Config_WLAN"][6] are WiFi 2G
    # config_para["DUT_Config_WLAN"][4]~config_para["DUT_Config_WLAN"][5] 
    # config_para["DUT_Config_WLAN"][7] are WiFi 5G
    s = set([1,2,3,6])
    for i,x in enumerate([mod_int_test_case_id]):
      if x in s:
        #print("WiFi 2.4G")  
        # Converting Python dict to kwargs?
        # https://stackoverflow.com/questions/5710391/converting-python-dict-to-kwargs
        self.wifi_2g_setup(**kwargs) 

      else: 
        #print("WiFi 5G")  
        # Converting Python dict to kwargs?
        # https://stackoverflow.com/questions/5710391/converting-python-dict-to-kwargs
        self.wifi_5g_setup(**kwargs) 

    #self.method_close()
    #self.method_teardown()
  