# 2019/09/18 Initial 

# Generated by Selenium IDE
from api_selenium import *
# Refer https://www.pingshiuanchua.com/blog/post/error-handling-in-selenium-on-python
from selenium.common.exceptions import ElementClickInterceptedException

class dir17x19x_internet_mode_setup():
  def __init__(self):
    self.driver = method_selenium()

  def method_teardown(self):
    self.driver.method_teardown()

  def method_close(self):
    self.driver.method_close()

  def dut_Login(self,how):
    self.driver.method_get(how)
    self.driver.method_set_window_size(1080, 705)
    self.driver.method_by_ID_click("logIn_btn")

  def dut_Sys_Reboot(self):
    
    self.driver.method_by_ID_mouseOver("menu_Management")

    self.driver.method_by_ID_click("menuBtn_Admin")
    
    self.driver.method_by_ID_click("page_btn")

    self.driver.method_by_ID_click("btn_reboot")

    #Wait dialogue
    self.driver.method_by_XPath_waitforelement_visibile("//div[@id=\'REBOOTCheck\']/table/tbody/tr/td")

    #Click
    self.driver.method_by_ID_click("dialogBtn_rebootOk")

    #Count down
    self.driver.method_by_ID_waitforelement_Invisibile("REBOOT")

    self.driver.method_by_ID_click("dialogBtn_rebootSuccess")

  def dut_Sys_Reset(self):
    #Mouse over "menu_Management"
    self.driver.method_by_ID_mouseOver("menu_Management")

    #click
    self.driver.method_by_ID_click("menuBtn_Admin")

    self.driver.method_by_ID_click("page_btn")

    self.driver.method_by_ID_click("btn_restorToFactoryDefault")

    self.driver.method_by_ID_click("dialogBtn_restorToFactoryDefaultOk")

    self.driver.method_by_ID_click("AlertPopBody")

    #Count down
    self.driver.method_by_ID_waitforelement_Invisibile("FACTORYDEFAULT")

    self.driver.method_by_ID_click("dialogBtn_restorToFactoryDefaultSuccess")

    self.driver.method_by_ID_click("btn_agree")

    #click()
    self.driver.method_by_ID_click("closeCreatePopBtn")

  def dut_internet_mode_pptp_manual(self):
    # Mouse over "menu_Settings"
    self.driver.method_by_ID_mouseOver("menu_Settings")

    self.driver.method_by_ID_click("menuBtn_Internet")
    
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")
    
    self.driver.method_by_LinkText_click("L2TP")
    
    # Key in Srv IP Add, username, password
    self.driver.method_by_ID_type("serverIPAddress_L2TP","10.0.1.3")
    self.driver.method_by_ID_type("userName_L2TP","ubuntutest")
    self.driver.method_by_ID_type("password_L2TP","test1234")

    # Select Manual mode
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")
    self.driver.method_by_LinkText_click("Manual")

    self.driver.method_by_ID_click("Save_btn")

    # Waiting set up
    self.driver.method_by_ID_verifytext("popalert_desc","Please wait ...")
    self.driver.method_by_ID_waitforelement_visibile("popalert_ok")
    self.driver.method_by_ID_verifytext("popalert_desc","The new settings have been saved.")
    
    # Press Ok button
    self.driver.method_by_ID_click("popalert_ok")

    self.driver.method_by_ID_click("menu_Home")

    self.driver.method_by_ID_click_chkclickable("RenewRelease_btn")

    #Check connect status
    self.driver.method_by_ID_verifytext_chkclickable("index_ShowNetworkStatus","Connected")  

class dir17x19x_wifi_2G5G_Setup():

  def __init__(self):
    self.driver = method_selenium()
    
  def method_teardown(self):
    self.driver.method_teardown()

  def method_close(self):
    self.driver.method_close()
  
  def dut_Login(self,how):
    self.driver.method_get(how)
    self.driver.method_set_window_size(1080, 705)
    self.driver.method_by_ID_click("logIn_btn")

  def wifi_SmartConnDisable(self):
    self.driver.method_by_ID_mouseOver("menu_Settings")

    self.driver.method_by_ID_click("menuBtn_WiFi")

    self.driver.method_by_CSS_SELECTOR_click("#RADIO_smart .chkbox_enabled")

    # Extend 2G option page
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    #Disable Coexistence_24
    self.driver.method_by_CSS_SELECTOR_click("#coexistence_24_tr .chkbox_enabled")

    #push save button
    self.driver.method_by_ID_click("Save_btn")

    #Wait
    self.driver.method_by_ID_click("popalert_ok")  

  

  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'WPAORWPA2-PSK\')])[2]").click()
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'None\')])[2]").click()
  #self.driver.find_element(By.XPATH, "(//a[contains(@href, \'WPA3-PSK\')])[2]").click()
  #######################################################################
  def xpath_wifi_5g_sec_mode(self,what):
    opt_what=''
    if what == "WPA3-Personal":
      opt_what= 'WPA3-PSK'
    elif what == "WPA/WPA2-Personal":
      opt_what= 'WPAORWPA2-PSK'
    else:
      opt_what= 'None'

    opt_what= "(//a[contains(@href, \'"+opt_what+"\')])[2]"
    return opt_what  
  
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'None\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'WPA3-PSK\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'WPAORWPA2-PSK\')]").click()
  #
  #self.driver.find_element(By.XPATH, "//a[contains(@href, \'None\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(.,\'WPA3-Personal\')]").click()
  #self.driver.find_element(By.XPATH, "//a[contains(.,\'WPA/WPA2-Personal\')]").click()
  #######################################################################
  def xpath_wifi_2g_sec_mode(self,what):
    opt_what=''
    if what == "WPA3-Personal":
      opt_what= 'WPA3-PSK'
    elif what == "WPA/WPA2-Personal":
      opt_what= 'WPAORWPA2-PSK'
    else:
      opt_what= 'None'

    opt_what= "//a[contains(@href, \'"+opt_what+"\')]"
    #"//a[contains(@href, \'"+opt_what+"\')]"
    return opt_what  

  #
  # WiFi 2G Setting
  ####################################################################
  def wifi_2g_setup(self,**kwargs):
    # Mouse over
    self.driver.method_by_ID_mouseOver("menu_Settings")

    # Select WiFi option
    self.driver.method_by_ID_click("menuBtn_WiFi")

    # Expand 2.4G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    # change 2G Securiyt Mode
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")
      
    except ElementClickInterceptedException:
      # Re try again
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[4]")

    # Check 2G security option
    #what= self.xpath_wifi_2g_sec_mode(kwargs['wifi_2g']['security_mode'])
    what= kwargs['wifi_2g']['security_mode']

    try:
      # Tries to drop down list to select
      #self.driver.method_by_XPath_click(what)
      self.driver.method_by_LinkText_click(what)
    except ElementClickInterceptedException:
      #self.driver.method_by_XPath_click(what)
      self.driver.method_by_LinkText_click(what)

    # Change SSID Password
    self.driver.method_by_ID_type("wifiName_24",kwargs['wifi_2g']['ssid'])
    self.driver.method_by_ID_type("password_24",kwargs['wifi_2g']['password'])

    # Change channel#
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[8]")

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['channel'])

    # Change Power
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")
      
    except ElementClickInterceptedException:
      # Re try again
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[10]")

    self.driver.method_by_LinkText_click("High")

    # Refer https://www.pingshiuanchua.com/blog/post/error-handling-in-selenium-on-python
    # Change Channel Width
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[12]")
    except ElementClickInterceptedException:
      # Re try again
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[12]")

    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['channel_width'])

    
    #self.driver.find_element(By.CSS_SELECTOR, ".radio24_advBtn > span").click()    
    #WebDriverWait(self.driver, 5000).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#coexistence_24_tr .chkbox_enabled")))
    #self.driver.find_element(By.CSS_SELECTOR, "#coexistence_24_tr .chkbox_enabled").click()

    # Change Visibility Status:	
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[14]")
    # Make 2G invisible
    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['visibility_status'])

    # Change 5G setting
    self.driver.method_by_CSS_SELECTOR_click("#RADIO_5 > .advButton > span")

    self.driver.method_by_ID_type("wifiName_5",kwargs['wifi_5g']['ssid'])
    self.driver.method_by_ID_type("password_5",kwargs['wifi_5g']['password'])

    # Select 5G Security mode by Select (Drop down list)  
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")

    # Check 5G security option
    what= self.xpath_wifi_5g_sec_mode(kwargs['wifi_5g']['security_mode'])
    
    try:
      # Tries to drop down list to select
      self.driver.method_by_XPath_click(what)
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click(what)

    
    # Make 5G invisible
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['visibility_status'])
    
    # Press Save buttion
    self.driver.method_by_ID_click("Save_btn")

    self.driver.method_by_ID_click("popalert_ok")  
  #
  # WiFi 5G Setting
  ####################################################################
  def wifi_5g_setup(self,**kwargs):
    # Mouse over
    self.driver.method_by_ID_mouseOver("menu_Settings")

    # Select WiFi option
    self.driver.method_by_ID_click("menuBtn_WiFi")
    
    # Expand 2.4G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click(".radio24_advBtn > span")

    # Change SSID Password
    self.driver.method_by_ID_type("wifiName_24",kwargs['wifi_2g']['ssid'])
    self.driver.method_by_ID_type("password_24",kwargs['wifi_2g']['password'])

    # Make 2G Invisible
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[14]")
    self.driver.method_by_LinkText_click(kwargs['wifi_2g']['visibility_status'])

    
    # Change 5G SSID Password
    self.driver.method_by_ID_type("wifiName_5",kwargs['wifi_5g']['ssid'])
    self.driver.method_by_ID_type("password_5",kwargs['wifi_5g']['password'])
    
    # Expand 5G Advanced Settings
    self.driver.method_by_CSS_SELECTOR_click("#RADIO_5 > .advButton > span")
    
    # Select 5G Security mode    
    try:
      # Tries to click an element
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[20]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['security_mode'])

    
    # Change Channel
    self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[24]")
    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['channel'])

    # Change Channel width
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[28]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[28]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['channel_width'])

    # Make 5G Invisible
    try:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")
    except ElementClickInterceptedException:
      self.driver.method_by_XPath_click("(//a[contains(@href, \'#\')])[30]")

    self.driver.method_by_LinkText_click(kwargs['wifi_5g']['visibility_status'])

    # press save buttion
    self.driver.method_by_ID_click("Save_btn")

    # Waiting
    self.driver.method_by_ID_click("popalert_ok")  